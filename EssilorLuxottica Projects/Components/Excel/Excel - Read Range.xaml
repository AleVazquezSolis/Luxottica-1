<Activity mc:Ignorable="sap sap2010" x:Class="Main" xmlns="http://schemas.microsoft.com/netfx/2009/xaml/activities" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:mva="clr-namespace:Microsoft.VisualBasic.Activities;assembly=System.Activities" xmlns:sap="http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation" xmlns:sap2010="http://schemas.microsoft.com/netfx/2010/xaml/activities/presentation" xmlns:scg="clr-namespace:System.Collections.Generic;assembly=mscorlib" xmlns:sco="clr-namespace:System.Collections.ObjectModel;assembly=mscorlib" xmlns:sd="clr-namespace:System.Data;assembly=System.Data" xmlns:ui="http://schemas.uipath.com/workflow/activities" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <x:Members>
    <x:Property Name="in_StrSheetName" Type="InArgument(x:String)" />
    <x:Property Name="in_StrWorkbookFileName" Type="InArgument(x:String)" />
    <x:Property Name="in_StrWorkbookFilePath" Type="InArgument(x:String)" />
    <x:Property Name="out_DtExtractedData" Type="OutArgument(sd:DataTable)" />
    <x:Property Name="in_BoolAddHeaders" Type="InArgument(x:Boolean)" />
    <x:Property Name="in_StrWorkbookPassword" Type="InArgument(x:String)" />
    <x:Property Name="in_StrRange" Type="InArgument(x:String)" />
  </x:Members>
  <mva:VisualBasic.Settings>
    <x:Null />
  </mva:VisualBasic.Settings>
  <sap:VirtualizedContainerService.HintSize>1474,3401</sap:VirtualizedContainerService.HintSize>
  <sap2010:WorkflowViewState.IdRef>Main_1</sap2010:WorkflowViewState.IdRef>
  <TextExpression.NamespacesForImplementation>
    <sco:Collection x:TypeArguments="x:String">
      <x:String>System.Activities</x:String>
      <x:String>System.Activities.Statements</x:String>
      <x:String>System.Activities.Expressions</x:String>
      <x:String>System.Activities.Validation</x:String>
      <x:String>System.Activities.XamlIntegration</x:String>
      <x:String>Microsoft.VisualBasic</x:String>
      <x:String>Microsoft.VisualBasic.Activities</x:String>
      <x:String>System</x:String>
      <x:String>System.Collections</x:String>
      <x:String>System.Collections.Generic</x:String>
      <x:String>System.Data</x:String>
      <x:String>System.Diagnostics</x:String>
      <x:String>System.Drawing</x:String>
      <x:String>System.IO</x:String>
      <x:String>System.Linq</x:String>
      <x:String>System.Net.Mail</x:String>
      <x:String>System.Xml</x:String>
      <x:String>System.Xml.Linq</x:String>
      <x:String>UiPath.Core</x:String>
      <x:String>System.Windows.Markup</x:String>
      <x:String>System.Xml.Serialization</x:String>
      <x:String>UiPath.Core.Activities</x:String>
    </sco:Collection>
  </TextExpression.NamespacesForImplementation>
  <TextExpression.ReferencesForImplementation>
    <sco:Collection x:TypeArguments="AssemblyReference">
      <AssemblyReference>System.Activities</AssemblyReference>
      <AssemblyReference>Microsoft.VisualBasic</AssemblyReference>
      <AssemblyReference>mscorlib</AssemblyReference>
      <AssemblyReference>System.Data</AssemblyReference>
      <AssemblyReference>System</AssemblyReference>
      <AssemblyReference>System.Drawing</AssemblyReference>
      <AssemblyReference>System.Core</AssemblyReference>
      <AssemblyReference>System.Xml</AssemblyReference>
      <AssemblyReference>System.Xml.Linq</AssemblyReference>
      <AssemblyReference>PresentationFramework</AssemblyReference>
      <AssemblyReference>WindowsBase</AssemblyReference>
      <AssemblyReference>PresentationCore</AssemblyReference>
      <AssemblyReference>System.Xaml</AssemblyReference>
      <AssemblyReference>System.ServiceModel</AssemblyReference>
      <AssemblyReference>System.ComponentModel.Composition</AssemblyReference>
      <AssemblyReference>System.Data.DataSetExtensions</AssemblyReference>
      <AssemblyReference>UiPath.IntelligentOCR</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities</AssemblyReference>
      <AssemblyReference>UiPath.UiAutomation.Activities</AssemblyReference>
      <AssemblyReference>UiPath.Excel</AssemblyReference>
      <AssemblyReference>UiPath.Mail</AssemblyReference>
      <AssemblyReference>UiPath.Cryptography</AssemblyReference>
    </sco:Collection>
  </TextExpression.ReferencesForImplementation>
  <Sequence DisplayName="Logic Component" sap:VirtualizedContainerService.HintSize="1039,3336" sap2010:WorkflowViewState.IdRef="Sequence_9">
    <Sequence.Variables>
      <Variable x:TypeArguments="x:String" Default="Excel - Read Range" Name="strComponentName" />
    </Sequence.Variables>
    <sap:WorkflowViewStateService.ViewState>
      <scg:Dictionary x:TypeArguments="x:String, x:Object">
        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
      </scg:Dictionary>
    </sap:WorkflowViewStateService.ViewState>
    <ui:Comment sap:VirtualizedContainerService.HintSize="997,324" sap2010:WorkflowViewState.IdRef="Comment_1" Text="Summary:  &#xA;&#xA;* Extract data from a single sheet within a given Workbook, factoring in password protection if required. &#xA;&#xA;Pre condition:&#xA;&#xA;* Check for existence of the required Workbook, if not found, throw AE. &#xA;&#xA;Post condition:&#xA;&#xA;* Checks the output datatable is initialised" />
    <ui:LogMessage DisplayName="Log Message - Start Log" sap:VirtualizedContainerService.HintSize="997,91" sap2010:WorkflowViewState.IdRef="LogMessage_5" Level="Info" Message="[&quot;Starting sequence &quot; + strComponentName]">
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          <x:Boolean x:Key="IsPinned">False</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
    </ui:LogMessage>
    <Sequence DisplayName="Excel - Read Range" sap:VirtualizedContainerService.HintSize="997,2618" sap2010:WorkflowViewState.IdRef="Sequence_8">
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          <x:Boolean x:Key="IsPinned">False</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
      <Sequence DisplayName="Pre Condition Check" sap:VirtualizedContainerService.HintSize="955,1707" sap2010:WorkflowViewState.IdRef="Sequence_5">
        <Sequence.Variables>
          <Variable x:TypeArguments="x:Boolean" Name="boolPreConditionMet" />
        </Sequence.Variables>
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
        <If Condition="[String.IsNullOrWhiteSpace(in_StrSheetName) = True]" DisplayName="If in_StrSheetName Is Null Or WhiteSpace" sap:VirtualizedContainerService.HintSize="579,239" sap2010:WorkflowViewState.IdRef="If_1">
          <If.Then>
            <Throw DisplayName="Throw AE " Exception="[New Exception(&quot;Incoming Argument in_StrSheetName Is Not Initialised Or Not Populated&quot;)]" sap:VirtualizedContainerService.HintSize="200,22" sap2010:WorkflowViewState.IdRef="Throw_1" />
          </If.Then>
          <If.Else>
            <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="334,91" sap2010:WorkflowViewState.IdRef="LogMessage_6" Level="Trace" Message="[&quot;Incoming Argument in_StrSheetName (Ref: &quot; &amp; in_StrSheetName &amp; &quot;) Is Not Null And Is Populated&quot;]" />
          </If.Else>
        </If>
        <If Condition="[String.IsNullOrWhiteSpace(in_StrWorkbookFileName) = True]" DisplayName="If in_StrWorkbookFileName Is Null Or WhiteSpace" sap:VirtualizedContainerService.HintSize="579,239" sap2010:WorkflowViewState.IdRef="If_3">
          <If.Then>
            <Throw DisplayName="Throw AE " Exception="[New Exception(&quot;Incoming Argument in_StrWorkbookFileName Is Not Initialised Or Not Populated&quot;)]" sap:VirtualizedContainerService.HintSize="200,22" sap2010:WorkflowViewState.IdRef="Throw_3" />
          </If.Then>
          <If.Else>
            <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="334,91" sap2010:WorkflowViewState.IdRef="LogMessage_9" Level="Trace" Message="[&quot;Incoming Argument in_StrWorkbookFileName (Ref: &quot; &amp; in_StrWorkbookFileName &amp; &quot;) Is Not Null And Is Populated&quot;]" />
          </If.Else>
        </If>
        <If Condition="[String.IsNullOrWhiteSpace(in_StrWorkbookFilePath) = True]" DisplayName="If in_StrWorkbookFilePath Is Null Or WhiteSpace" sap:VirtualizedContainerService.HintSize="579,239" sap2010:WorkflowViewState.IdRef="If_4">
          <If.Then>
            <Throw DisplayName="Throw AE " Exception="[New Exception(&quot;Incoming Argument in_sStrWorkbookFilePath  Is Not Initialised Or Not Populated&quot;)]" sap:VirtualizedContainerService.HintSize="200,22" sap2010:WorkflowViewState.IdRef="Throw_4" />
          </If.Then>
          <If.Else>
            <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="334,91" sap2010:WorkflowViewState.IdRef="LogMessage_10" Level="Trace" Message="[&quot;Incoming Argument in_StrWorkbookFilePath (Ref: &quot; &amp; in_StrWorkbookFilePath  &amp; &quot;) Is Not Null And Is Populated&quot;]" />
          </If.Else>
        </If>
        <If Condition="[String.IsNullOrWhiteSpace(in_StrRange) = True]" DisplayName="If in_StrRange Is Null Or WhiteSpace" sap:VirtualizedContainerService.HintSize="579,239" sap2010:WorkflowViewState.IdRef="If_7">
          <If.Then>
            <Throw DisplayName="Throw AE " Exception="[New Exception(&quot;Incoming Argument in_StrRange Is Not Initialised Or Not Populated&quot;)]" sap:VirtualizedContainerService.HintSize="200,22" sap2010:WorkflowViewState.IdRef="Throw_6" />
          </If.Then>
          <If.Else>
            <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="334,91" sap2010:WorkflowViewState.IdRef="LogMessage_12" Level="Trace" Message="[&quot;Incoming Argument in_StrRange (Ref: &quot; &amp; in_StrRange  &amp; &quot;) Is Not Null And Is Populated&quot;]" />
          </If.Else>
        </If>
        <ui:PathExists DisplayName="Path Exists (in_StrWorkbookFilePath, in_StrWorkbookFileName)" Exists="[boolPreConditionMet]" sap:VirtualizedContainerService.HintSize="579,89" sap2010:WorkflowViewState.IdRef="PathExists_1" Path="[Path.Combine(in_StrWorkbookFilePath, in_StrWorkbookFileName)]" PathType="File" />
        <ui:LogMessage DisplayName="Log message" sap:VirtualizedContainerService.HintSize="579,91" sap2010:WorkflowViewState.IdRef="LogMessage_13" Level="Trace" Message="[Path.Combine(in_StrWorkbookFilePath, in_StrWorkbookFileName).ToString]" />
        <If Condition="[boolPreConditionMet = False]" DisplayName="If Pre Condition is False" sap:VirtualizedContainerService.HintSize="579,239" sap2010:WorkflowViewState.IdRef="If_5">
          <If.Then>
            <Throw DisplayName="Throw PreCondition EXC" Exception="[new Exception(&quot;Pre-Condition Failed, Provided Workbook Does Not Exist At The Given Path&quot;)]" sap:VirtualizedContainerService.HintSize="200,22" sap2010:WorkflowViewState.IdRef="Throw_5" />
          </If.Then>
          <If.Else>
            <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="334,91" sap2010:WorkflowViewState.IdRef="LogMessage_11" Level="Trace" Message="Pre-Condition Successful, Provided Workbook Exists At The Given Path" />
          </If.Else>
        </If>
      </Sequence>
      <Sequence DisplayName="Perform Sequence Actions" sap:VirtualizedContainerService.HintSize="955,408" sap2010:WorkflowViewState.IdRef="Sequence_6">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
        <If Condition="[in_BoolAddHeaders = True]" DisplayName="If in_BoolAddHeaders Is True" sap:VirtualizedContainerService.HintSize="913,316" sap2010:WorkflowViewState.IdRef="If_6">
          <If.Then>
            <ui:ExcelApplicationScope DisplayName="Excel Application Scope (in_WorkbookFilePath, in_StrWorkbookFileName)" sap:VirtualizedContainerService.HintSize="434,168" sap2010:WorkflowViewState.IdRef="ExcelApplicationScope_1" Password="[in_StrWorkbookPassword]" Visible="False" WorkbookPath="[Path.Combine(in_StrWorkbookFilePath, in_strWorkbookFileName)]">
              <ui:ExcelApplicationScope.Body>
                <ActivityAction x:TypeArguments="ui:WorkbookApplication">
                  <ActivityAction.Argument>
                    <DelegateInArgument x:TypeArguments="ui:WorkbookApplication" Name="ExcelWorkbookScope" />
                  </ActivityAction.Argument>
                  <ui:ExcelReadRange AddHeaders="True" DataTable="[out_DtExtractedData]" DisplayName="Read Range (All) With Headers" sap:VirtualizedContainerService.HintSize="334,59" sap2010:WorkflowViewState.IdRef="ExcelReadRange_1" Range="[in_StrRange]" SheetName="[in_StrSheetName]" />
                </ActivityAction>
              </ui:ExcelApplicationScope.Body>
            </ui:ExcelApplicationScope>
          </If.Then>
          <If.Else>
            <ui:ExcelApplicationScope DisplayName="Excel Application Scope (in_WorkbookFilePath, in_StrWorkbookFileName)" sap:VirtualizedContainerService.HintSize="434,168" sap2010:WorkflowViewState.IdRef="ExcelApplicationScope_3" Password="[in_StrWorkbookPassword]" Visible="False" WorkbookPath="[Path.Combine(in_StrWorkbookFilePath, in_strWorkbookFileName)]">
              <ui:ExcelApplicationScope.Body>
                <ActivityAction x:TypeArguments="ui:WorkbookApplication">
                  <ActivityAction.Argument>
                    <DelegateInArgument x:TypeArguments="ui:WorkbookApplication" Name="ExcelWorkbookScope" />
                  </ActivityAction.Argument>
                  <ui:ExcelReadRange AddHeaders="False" DataTable="[out_DtExtractedData]" DisplayName="Read Range (All) Without Headers" sap:VirtualizedContainerService.HintSize="334,59" sap2010:WorkflowViewState.IdRef="ExcelReadRange_3" Range="[in_StrRange]" SheetName="[in_StrSheetName]" />
                </ActivityAction>
              </ui:ExcelApplicationScope.Body>
            </ui:ExcelApplicationScope>
          </If.Else>
        </If>
      </Sequence>
      <Sequence DisplayName="Post Condition Check" sap:VirtualizedContainerService.HintSize="955,331" sap2010:WorkflowViewState.IdRef="Sequence_7">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
        <If Condition="[out_DtExtractedData is Nothing]" DisplayName="If out_DtExtractedData Is Null Or Not Populated" sap:VirtualizedContainerService.HintSize="579,239" sap2010:WorkflowViewState.IdRef="If_2">
          <If.Then>
            <Throw DisplayName="Throw AE " Exception="[New Exception(&quot;Outgoing Argument out_DtExtractedData Is Not Initialised Or Not Populated&quot;)]" sap:VirtualizedContainerService.HintSize="200,22" sap2010:WorkflowViewState.IdRef="Throw_2" />
          </If.Then>
          <If.Else>
            <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="334,91" sap2010:WorkflowViewState.IdRef="LogMessage_7" Level="Trace" Message="[&quot;Post Condition Check out_DtExtractedData (Rows: &quot; &amp; out_DtExtractedData.Rows.Count.ToString &amp; &quot;) Is Not Null And Is Populated&quot;]" />
          </If.Else>
        </If>
      </Sequence>
    </Sequence>
    <ui:LogMessage DisplayName="Log Message - End Log" sap:VirtualizedContainerService.HintSize="997,91" sap2010:WorkflowViewState.IdRef="LogMessage_8" Level="Info" Message="[&quot;Ending sequence &quot; + strComponentName]">
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          <x:Boolean x:Key="IsPinned">False</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
    </ui:LogMessage>
  </Sequence>
</Activity>